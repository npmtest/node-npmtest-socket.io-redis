{"/home/travis/build/npmtest/node-npmtest-socket.io-redis/test.js":"/* istanbul instrument in package npmtest_socket_io_redis */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-socket.io-redis/lib.npmtest_socket.io_redis.js":"/* istanbul instrument in package npmtest_socket_io_redis */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_socket_io_redis = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_socket_io_redis = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-socket.io-redis/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-socket.io-redis && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_socket_io_redis */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_socket_io_redis\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_socket_io_redis.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_socket_io_redis.rollup.js'] =\n            local.assetsDict['/assets.npmtest_socket_io_redis.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_socket_io_redis.__dirname + '/lib.npmtest_socket_io_redis.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-socket.io-redis/node_modules/socket.io-redis/index.js":"\n/**\n * Module dependencies.\n */\n\nvar uid2 = require('uid2');\nvar redis = require('redis').createClient;\nvar msgpack = require('msgpack-lite');\nvar Adapter = require('socket.io-adapter');\nvar debug = require('debug')('socket.io-redis');\nvar async = require('async');\n\n/**\n * Module exports.\n */\n\nmodule.exports = adapter;\n\n/**\n * Request types, for messages between nodes\n */\n\nvar requestTypes = {\n  clients: 0,\n  clientRooms: 1,\n  allRooms: 2,\n  remoteJoin: 3,\n  remoteLeave: 4,\n  customRequest: 5,\n  remoteDisconnect: 6\n};\n\n/**\n * Returns a redis Adapter class.\n *\n * @param {String} optional, redis uri\n * @return {RedisAdapter} adapter\n * @api public\n */\n\nfunction adapter(uri, opts) {\n  opts = opts || {};\n\n  // handle options only\n  if ('object' == typeof uri) {\n    opts = uri;\n    uri = null;\n  }\n\n  // opts\n  var pub = opts.pubClient;\n  var sub = opts.subClient;\n\n  var prefix = opts.key || 'socket.io';\n  var subEvent = opts.subEvent || 'messageBuffer';\n  var requestsTimeout = opts.requestsTimeout || 1000;\n  var withChannelMultiplexing = false !== opts.withChannelMultiplexing;\n\n  // init clients if needed\n  function createClient() {\n    if (uri) {\n      // handle uri string\n      return redis(uri, opts);\n    } else {\n      return redis(opts);\n    }\n  }\n\n  if (!pub) pub = createClient();\n  if (!sub) sub = createClient();\n\n  // this server's key\n  var uid = uid2(6);\n\n  /**\n   * Adapter constructor.\n   *\n   * @param {String} namespace name\n   * @api public\n   */\n\n  function Redis(nsp){\n    Adapter.call(this, nsp);\n\n    this.uid = uid;\n    this.prefix = prefix;\n    this.requestsTimeout = requestsTimeout;\n    this.withChannelMultiplexing = withChannelMultiplexing;\n\n    this.channel = prefix + '#' + nsp.name + '#';\n    this.requestChannel = prefix + '-request#' + this.nsp.name + '#';\n    this.responseChannel = prefix + '-response#' + this.nsp.name + '#';\n    this.requests = {};\n    this.customHook = function(data, cb){ cb(null); }\n\n    if (String.prototype.startsWith) {\n      this.channelMatches = function (messageChannel, subscribedChannel) {\n        return messageChannel.startsWith(subscribedChannel);\n      }\n    } else { // Fallback to other impl for older Node.js\n      this.channelMatches = function (messageChannel, subscribedChannel) {\n        return messageChannel.substr(0, subscribedChannel.length) === subscribedChannel;\n      }\n    }\n    this.pubClient = pub;\n    this.subClient = sub;\n\n    var self = this;\n\n    sub.subscribe([this.channel, this.requestChannel, this.responseChannel], function(err){\n      if (err) self.emit('error', err);\n    });\n\n    sub.on(subEvent, this.onmessage.bind(this));\n\n    function onError(err) {\n      self.emit('error', err);\n    }\n    pub.on('error', onError);\n    sub.on('error', onError);\n  }\n\n  /**\n   * Inherits from `Adapter`.\n   */\n\n  Redis.prototype.__proto__ = Adapter.prototype;\n\n  /**\n   * Called with a subscription message\n   *\n   * @api private\n   */\n\n  Redis.prototype.onmessage = function(channel, msg){\n    channel = channel.toString();\n\n    if (this.channelMatches(channel, this.requestChannel)) {\n      return this.onrequest(channel, msg);\n    } else if (this.channelMatches(channel, this.responseChannel)) {\n      return this.onresponse(channel, msg);\n    } else if (!this.channelMatches(channel, this.channel)) {\n      return debug('ignore different channel');\n    }\n\n    var args = msgpack.decode(msg);\n    var packet;\n\n    if (uid == args.shift()) return debug('ignore same uid');\n\n    packet = args[0];\n\n    if (packet && packet.nsp === undefined) {\n      packet.nsp = '/';\n    }\n\n    if (!packet || packet.nsp != this.nsp.name) {\n      return debug('ignore different namespace');\n    }\n\n    args.push(true);\n\n    this.broadcast.apply(this, args);\n  };\n\n  /**\n   * Called on request from another node\n   *\n   * @api private\n   */\n\n  Redis.prototype.onrequest = function(channel, msg){\n    var self = this;\n    var request;\n\n    try {\n      request = JSON.parse(msg);\n    } catch(err){\n      self.emit('error', err);\n      return;\n    }\n\n    debug('received request %j', request);\n\n    switch (request.type) {\n\n      case requestTypes.clients:\n        Adapter.prototype.clients.call(self, request.rooms, function(err, clients){\n          if(err){\n            self.emit('error', err);\n            return;\n          }\n\n          var response = JSON.stringify({\n            requestid: request.requestid,\n            clients: clients\n          });\n\n          pub.publish(self.responseChannel, response);\n        });\n        break;\n\n      case requestTypes.clientRooms:\n        Adapter.prototype.clientRooms.call(self, request.sid, function(err, rooms){\n          if(err){\n            self.emit('error', err);\n            return;\n          }\n\n          if (!rooms) { return; }\n\n          var response = JSON.stringify({\n            requestid: request.requestid,\n            rooms: rooms\n          });\n\n          pub.publish(self.responseChannel, response);\n        });\n        break;\n\n      case requestTypes.allRooms:\n\n        var response = JSON.stringify({\n          requestid: request.requestid,\n          rooms: Object.keys(this.rooms)\n        });\n\n        pub.publish(self.responseChannel, response);\n        break;\n\n      case requestTypes.remoteJoin:\n\n        var socket = this.nsp.connected[request.sid];\n        if (!socket) { return; }\n\n        function sendAck(){\n          var response = JSON.stringify({\n            requestid: request.requestid\n          });\n\n          pub.publish(self.responseChannel, response);\n        }\n\n        socket.join(request.room, sendAck);\n        break;\n\n      case requestTypes.remoteLeave:\n\n        var socket = this.nsp.connected[request.sid];\n        if (!socket) { return; }\n\n        function sendAck(){\n          var response = JSON.stringify({\n            requestid: request.requestid\n          });\n\n          pub.publish(self.responseChannel, response);\n        }\n\n        socket.leave(request.room, sendAck);\n        break;\n\n      case requestTypes.remoteDisconnect:\n\n        var socket = this.nsp.connected[request.sid];\n        if (!socket) { return; }\n\n        socket.disconnect(request.close);\n\n        var response = JSON.stringify({\n          requestid: request.requestid\n        });\n\n        pub.publish(self.responseChannel, response);\n        break;\n\n      case requestTypes.customRequest:\n        this.customHook(request.data, function(data) {\n\n          var response = JSON.stringify({\n            requestid: request.requestid,\n            data: data\n          });\n\n          pub.publish(self.responseChannel, response);\n        });\n\n        break;\n\n      default:\n        debug('ignoring unknown request type: %s', request.type);\n    }\n  };\n\n  /**\n   * Called on response from another node\n   *\n   * @api private\n   */\n\n  Redis.prototype.onresponse = function(channel, msg){\n    var self = this;\n    var response;\n\n    try {\n      response = JSON.parse(msg);\n    } catch(err){\n      self.emit('error', err);\n      return;\n    }\n\n    if (!response.requestid || !self.requests[response.requestid]) {\n      debug('ignoring unknown request');\n      return;\n    }\n\n    debug('received response %j', response);\n\n    var request = self.requests[response.requestid];\n\n    switch (request.type) {\n\n      case requestTypes.clients:\n        request.msgCount++;\n\n        // ignore if response does not contain 'clients' key\n        if(!response.clients || !Array.isArray(response.clients)) return;\n\n        for(var i = 0; i < response.clients.length; i++){\n          request.clients[response.clients[i]] = true;\n        }\n\n        if (request.msgCount === request.numsub) {\n          clearTimeout(request.timeout);\n          if (request.callback) process.nextTick(request.callback.bind(null, null, Object.keys(request.clients)));\n          delete self.requests[request.requestid];\n        }\n        break;\n\n      case requestTypes.clientRooms:\n        clearTimeout(request.timeout);\n        if (request.callback) process.nextTick(request.callback.bind(null, null, response.rooms));\n        delete self.requests[request.requestid];\n        break;\n\n      case requestTypes.allRooms:\n        request.msgCount++;\n\n        // ignore if response does not contain 'rooms' key\n        if(!response.rooms || !Array.isArray(response.rooms)) return;\n\n        for(var i = 0; i < response.rooms.length; i++){\n          request.rooms[response.rooms[i]] = true;\n        }\n\n        if (request.msgCount === request.numsub) {\n          clearTimeout(request.timeout);\n          if (request.callback) process.nextTick(request.callback.bind(null, null, Object.keys(request.rooms)));\n          delete self.requests[request.requestid];\n        }\n        break;\n\n      case requestTypes.remoteJoin:\n      case requestTypes.remoteLeave:\n      case requestTypes.remoteDisconnect:\n        clearTimeout(request.timeout);\n        if (request.callback) process.nextTick(request.callback.bind(null, null));\n        delete self.requests[request.requestid];\n        break;\n\n      case requestTypes.customRequest:\n        request.msgCount++;\n\n        request.replies.push(response.data);\n\n        if (request.msgCount === request.numsub) {\n          clearTimeout(request.timeout);\n          if (request.callback) process.nextTick(request.callback.bind(null, null, request.replies));\n          delete self.requests[request.requestid];\n        }\n        break;\n\n      default:\n        debug('ignoring unknown request type: %s', request.type);\n    }\n  };\n\n  /**\n   * Broadcasts a packet.\n   *\n   * @param {Object} packet to emit\n   * @param {Object} options\n   * @param {Boolean} whether the packet came from another node\n   * @api public\n   */\n\n  Redis.prototype.broadcast = function(packet, opts, remote){\n    packet.nsp = this.nsp.name;\n    if (!(remote || (opts && opts.flags && opts.flags.local))) {\n      var msg = msgpack.encode([uid, packet, opts]);\n      if (this.withChannelMultiplexing && opts.rooms && opts.rooms.length === 1) {\n        pub.publish(this.channel + opts.rooms[0] + '#', msg);\n      } else {\n        pub.publish(this.channel, msg);\n      }\n    }\n    Adapter.prototype.broadcast.call(this, packet, opts);\n  };\n\n  /**\n   * Subscribe client to room messages.\n   *\n   * @param {String} client id\n   * @param {String} room\n   * @param {Function} callback (optional)\n   * @api public\n   */\n\n  Redis.prototype.add = function(id, room, fn){\n    debug('adding %s to %s ', id, room);\n    var self = this;\n    // subscribe only once per room\n    var alreadyHasRoom = this.rooms.hasOwnProperty(room);\n    Adapter.prototype.add.call(this, id, room);\n\n    if (!this.withChannelMultiplexing || alreadyHasRoom) {\n      if (fn) fn(null);\n      return;\n    }\n\n    var channel = this.channel + room + '#';\n\n    function onSubscribe(err) {\n      if (err) {\n        self.emit('error', err);\n        if (fn) fn(err);\n        return;\n      }\n      if (fn) fn(null);\n    }\n\n    sub.subscribe(channel, onSubscribe);\n  };\n\n  /**\n   * Unsubscribe client from room messages.\n   *\n   * @param {String} session id\n   * @param {String} room id\n   * @param {Function} callback (optional)\n   * @api public\n   */\n\n  Redis.prototype.del = function(id, room, fn){\n    debug('removing %s from %s', id, room);\n\n    var self = this;\n    var hasRoom = this.rooms.hasOwnProperty(room);\n    Adapter.prototype.del.call(this, id, room);\n\n    if (this.withChannelMultiplexing && hasRoom && !this.rooms[room]) {\n      var channel = this.channel + room + '#';\n\n      function onUnsubscribe(err) {\n        if (err) {\n          self.emit('error', err);\n          if (fn) fn(err);\n          return;\n        }\n        if (fn) fn(null);\n      }\n\n      sub.unsubscribe(channel, onUnsubscribe);\n    } else {\n      if (fn) process.nextTick(fn.bind(null, null));\n    }\n  };\n\n  /**\n   * Unsubscribe client completely.\n   *\n   * @param {String} client id\n   * @param {Function} callback (optional)\n   * @api public\n   */\n\n  Redis.prototype.delAll = function(id, fn){\n    debug('removing %s from all rooms', id);\n\n    var self = this;\n    var rooms = this.sids[id];\n\n    if (!rooms) {\n      if (fn) process.nextTick(fn.bind(null, null));\n      return;\n    }\n\n    async.each(Object.keys(rooms), function(room, next){\n      self.del(id, room, next);\n    }, function(err){\n      if (err) {\n        self.emit('error', err);\n        if (fn) fn(err);\n        return;\n      }\n      delete self.sids[id];\n      if (fn) fn(null);\n    });\n  };\n\n  /**\n   * Gets a list of clients by sid.\n   *\n   * @param {Array} explicit set of rooms to check.\n   * @param {Function} callback\n   * @api public\n   */\n\n  Redis.prototype.clients = function(rooms, fn){\n    if ('function' == typeof rooms){\n      fn = rooms;\n      rooms = null;\n    }\n\n    rooms = rooms || [];\n\n    var self = this;\n    var requestid = uid2(6);\n\n    pub.send_command('pubsub', ['numsub', self.requestChannel], function(err, numsub){\n      if (err) {\n        self.emit('error', err);\n        if (fn) fn(err);\n        return;\n      }\n\n      numsub = parseInt(numsub[1], 10);\n\n      var request = JSON.stringify({\n        requestid : requestid,\n        type: requestTypes.clients,\n        rooms : rooms\n      });\n\n      // if there is no response for x second, return result\n      var timeout = setTimeout(function() {\n        var request = self.requests[requestid];\n        if (fn) process.nextTick(fn.bind(null, new Error('timeout reached while waiting for clients response'), Object.keys(request.clients)));\n        delete self.requests[requestid];\n      }, self.requestsTimeout);\n\n      self.requests[requestid] = {\n        type: requestTypes.clients,\n        numsub: numsub,\n        msgCount: 0,\n        clients: {},\n        callback: fn,\n        timeout: timeout\n      };\n\n      pub.publish(self.requestChannel, request);\n    });\n  };\n\n  /**\n   * Gets the list of rooms a given client has joined.\n   *\n   * @param {String} client id\n   * @param {Function} callback\n   * @api public\n   */\n\n  Redis.prototype.clientRooms = function(id, fn){\n\n    var self = this;\n    var requestid = uid2(6);\n\n    var rooms = this.sids[id];\n\n    if (rooms) {\n      if (fn) process.nextTick(fn.bind(null, null, Object.keys(rooms)));\n      return;\n    }\n\n    var request = JSON.stringify({\n      requestid : requestid,\n      type: requestTypes.clientRooms,\n      sid : id\n    });\n\n    // if there is no response for x second, return result\n    var timeout = setTimeout(function() {\n      if (fn) process.nextTick(fn.bind(null, new Error('timeout reached while waiting for rooms response')));\n      delete self.requests[requestid];\n    }, self.requestsTimeout);\n\n    self.requests[requestid] = {\n      type: requestTypes.clientRooms,\n      callback: fn,\n      timeout: timeout\n    };\n\n    pub.publish(self.requestChannel, request);\n  };\n\n  /**\n   * Gets the list of all rooms (accross every node)\n   *\n   * @param {Function} callback\n   * @api public\n   */\n\n  Redis.prototype.allRooms = function(fn){\n\n    var self = this;\n    var requestid = uid2(6);\n\n    pub.send_command('pubsub', ['numsub', self.requestChannel], function(err, numsub){\n      if (err) {\n        self.emit('error', err);\n        if (fn) fn(err);\n        return;\n      }\n\n      numsub = parseInt(numsub[1], 10);\n\n      var request = JSON.stringify({\n        requestid : requestid,\n        type: requestTypes.allRooms\n      });\n\n      // if there is no response for x second, return result\n      var timeout = setTimeout(function() {\n        var request = self.requests[requestid];\n        if (fn) process.nextTick(fn.bind(null, new Error('timeout reached while waiting for allRooms response'), Object.keys(request.rooms)));\n        delete self.requests[requestid];\n      }, self.requestsTimeout);\n\n      self.requests[requestid] = {\n        type: requestTypes.allRooms,\n        numsub: numsub,\n        msgCount: 0,\n        rooms: {},\n        callback: fn,\n        timeout: timeout\n      };\n\n      pub.publish(self.requestChannel, request);\n    });\n  };\n\n  /**\n   * Makes the socket with the given id join the room\n   *\n   * @param {String} socket id\n   * @param {String} room name\n   * @param {Function} callback\n   * @api public\n   */\n\n  Redis.prototype.remoteJoin = function(id, room, fn){\n\n    var self = this;\n    var requestid = uid2(6);\n\n    var socket = this.nsp.connected[id];\n    if (socket) {\n      socket.join(room, fn);\n      return;\n    }\n\n    var request = JSON.stringify({\n      requestid : requestid,\n      type: requestTypes.remoteJoin,\n      sid: id,\n      room: room\n    });\n\n    // if there is no response for x second, return result\n    var timeout = setTimeout(function() {\n      if (fn) process.nextTick(fn.bind(null, new Error('timeout reached while waiting for remoteJoin response')));\n      delete self.requests[requestid];\n    }, self.requestsTimeout);\n\n    self.requests[requestid] = {\n      type: requestTypes.remoteJoin,\n      callback: fn,\n      timeout: timeout\n    };\n\n    pub.publish(self.requestChannel, request);\n  };\n\n  /**\n   * Makes the socket with the given id leave the room\n   *\n   * @param {String} socket id\n   * @param {String} room name\n   * @param {Function} callback\n   * @api public\n   */\n\n  Redis.prototype.remoteLeave = function(id, room, fn){\n\n    var self = this;\n    var requestid = uid2(6);\n\n    var socket = this.nsp.connected[id];\n    if (socket) {\n      socket.leave(room, fn);\n      return;\n    }\n\n    var request = JSON.stringify({\n      requestid : requestid,\n      type: requestTypes.remoteLeave,\n      sid: id,\n      room: room\n    });\n\n    // if there is no response for x second, return result\n    var timeout = setTimeout(function() {\n      if (fn) process.nextTick(fn.bind(null, new Error('timeout reached while waiting for remoteLeave response')));\n      delete self.requests[requestid];\n    }, self.requestsTimeout);\n\n    self.requests[requestid] = {\n      type: requestTypes.remoteLeave,\n      callback: fn,\n      timeout: timeout\n    };\n\n    pub.publish(self.requestChannel, request);\n  };\n\n  /**\n   * Makes the socket with the given id to be disconnected forcefully\n   * @param {String} socket id\n   * @param {Boolean} close if `true`, closes the underlying connection\n   * @param {Function} callback\n   */\n\n  Redis.prototype.remoteDisconnect = function(id, close, fn) {\n    var self = this;\n    var requestid = uid2(6);\n\n    var socket = this.nsp.connected[id];\n    if(socket) {\n      socket.disconnect(close);\n      if (fn) process.nextTick(fn.bind(null, null));\n      return;\n    }\n\n    var request = JSON.stringify({\n      requestid : requestid,\n      type: requestTypes.remoteDisconnect,\n      sid: id,\n      close: close\n    });\n\n    // if there is no response for x second, return result\n    var timeout = setTimeout(function() {\n      if (fn) process.nextTick(fn.bind(null, new Error('timeout reached while waiting for remoteDisconnect response')));\n      delete self.requests[requestid];\n    }, self.requestsTimeout);\n\n    self.requests[requestid] = {\n      type: requestTypes.remoteDisconnect,\n      callback: fn,\n      timeout: timeout\n    };\n\n    pub.publish(self.requestChannel, request);\n  };\n\n  /**\n   * Sends a new custom request to other nodes\n   *\n   * @param {Object} data (no binary)\n   * @param {Function} callback\n   * @api public\n   */\n\n  Redis.prototype.customRequest = function(data, fn){\n    if (typeof data === 'function'){\n      fn = data;\n      data = null;\n    }\n\n    var self = this;\n    var requestid = uid2(6);\n\n    pub.send_command('pubsub', ['numsub', self.requestChannel], function(err, numsub){\n      if (err) {\n        self.emit('error', err);\n        if (fn) fn(err);\n        return;\n      }\n\n      numsub = parseInt(numsub[1], 10);\n\n      var request = JSON.stringify({\n        requestid : requestid,\n        type: requestTypes.customRequest,\n        data: data\n      });\n\n      // if there is no response for x second, return result\n      var timeout = setTimeout(function() {\n        var request = self.requests[requestid];\n        if (fn) process.nextTick(fn.bind(null, new Error('timeout reached while waiting for customRequest response'), request.replies));\n        delete self.requests[requestid];\n      }, self.requestsTimeout);\n\n      self.requests[requestid] = {\n        type: requestTypes.customRequest,\n        numsub: numsub,\n        msgCount: 0,\n        replies: [],\n        callback: fn,\n        timeout: timeout\n      };\n\n      pub.publish(self.requestChannel, request);\n    });\n  };\n\n  Redis.uid = uid;\n  Redis.pubClient = pub;\n  Redis.subClient = sub;\n  Redis.prefix = prefix;\n  Redis.requestsTimeout = requestsTimeout;\n\n  return Redis;\n\n}\n"}